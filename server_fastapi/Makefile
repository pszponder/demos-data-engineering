.PHONY: help dev clean lint fmt build up down downall destroy logs

# Default target - show help when just typing 'make'
default: help

# Show help information
help: ## Show this help message
	@echo "FastAPI Server Management"
	@echo "Available commands:"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | awk 'BEGIN {FS = ":.*?## "}; {printf "  %-12s %s\n", $$1, $$2}'

# Start FastAPI development server
dev: ## Start FastAPI development server
	@if [ -f .env ]; then \
		set -a && . ./.env && set +a && \
		uv run fastapi dev main.py --port $$PORT; \
	else \
		uv run fastapi dev main.py --port 8000; \
	fi

# Run linting with ruff (applies fixes when available)
lint: ## Run linting with ruff (applies fixes when available)
	uv run ruff check --fix .

# Format code with ruff
fmt: ## Format code with ruff
	uv run ruff format .

# Clean up project
clean: ## Clean up generated files (__pycache__, .ruff_cache, etc.)
	@echo "🧹 Cleaning up generated files..."
	@find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
	@find . -type f -name "*.pyc" -delete 2>/dev/null || true
	@find . -type f -name "*.pyo" -delete 2>/dev/null || true
	@find . -type f -name "*.pyd" -delete 2>/dev/null || true
	@find . -type f -name ".coverage" -delete 2>/dev/null || true
	@find . -type d -name "*.egg-info" -exec rm -rf {} + 2>/dev/null || true
	@find . -type d -name ".pytest_cache" -exec rm -rf {} + 2>/dev/null || true
	@find . -type d -name ".ruff_cache" -exec rm -rf {} + 2>/dev/null || true
	@find . -type d -name ".mypy_cache" -exec rm -rf {} + 2>/dev/null || true
	@find . -type d -name "htmlcov" -exec rm -rf {} + 2>/dev/null || true
	@find . -type f -name ".DS_Store" -delete 2>/dev/null || true
	@echo "✅ Cleanup complete!"

# Build Docker image with specified tag
build: ## Build Docker image with specified tag (usage: make build TAG=mytag)
	@if [ -z "$(TAG)" ]; then \
		echo "🐳 Building Docker image with tag 'latest'..."; \
		docker build -t server-fastapi:latest .; \
	else \
		echo "🐳 Building Docker image with tag '$(TAG)'..."; \
		docker build -t server-fastapi:$(TAG) .; \
	fi
	@echo "✅ Docker image built successfully!"

# Start Docker containers
up: ## Start Docker containers
	@echo "🚀 Starting Docker containers..."
	docker compose up -d
	@echo "✅ Containers started!"
	@echo ""
	@echo "📋 Server Information:"
	@if [ -f .env ]; then \
		PORT=$$(grep '^PORT=' .env | cut -d'=' -f2); \
		echo "   FastAPI Server: http://localhost:$$PORT"; \
		echo "   API Docs: http://localhost:$$PORT/docs"; \
		echo "   ReDoc: http://localhost:$$PORT/redoc"; \
	else \
		echo "   FastAPI Server: http://localhost:8000"; \
		echo "   API Docs: http://localhost:8000/docs"; \
		echo "   ReDoc: http://localhost:8000/redoc"; \
	fi
	@echo ""
	@echo "💡 Use 'make logs' to watch server logs"

# Stop Docker containers
down: ## Stop Docker containers
	@echo "🛑 Stopping Docker containers..."
	docker compose down
	@echo "✅ Containers stopped!"

# Stop and remove Docker containers, networks, and volumes
downall: ## Stop and remove containers, networks, and volumes
	@echo "🧹 Stopping and removing containers, networks, and volumes..."
	docker compose down --volumes --remove-orphans
	@echo "✅ Complete cleanup finished!"

# Clean up all Docker artifacts generated by this project
destroy: ## Clean up all Docker artifacts generated by this project
	@echo "🧹 Destroying all Docker artifacts for this project..."
	docker compose down --volumes --remove-orphans --rmi all
	@echo "✅ Docker cleanup complete!"

# Watch logs from the FastAPI server
logs: ## Watch logs from the FastAPI server
	@echo "📋 Watching FastAPI server logs (press Ctrl+C to exit)..."
	@echo ""
	docker compose logs -f fastapi-app
