.PHONY: help dev clean lint fmt build up down downall destroy

# Default target - show help
help:
	@echo "Available commands:"
	@echo "  help    Show this help message (default)"
	@echo "  dev     Start FastAPI development server"
	@echo "  lint    Run linting with ruff (applies fixes when available)"
	@echo "  fmt     Format code with ruff"
	@echo "  clean   Clean up generated files (__pycache__, .ruff_cache, etc.)"
	@echo "  build   Build Docker image with specified tag (usage: make build TAG=mytag)"
	@echo "  up      Start Docker containers"
	@echo "  down    Stop Docker containers"
	@echo "  downall Stop and remove Docker containers, networks, and volumes"
	@echo "  destroy Clean up all Docker artifacts generated by this project"

# Start FastAPI development server
dev:
	@if [ -f .env ]; then \
		set -a && . ./.env && set +a && \
		uv run fastapi dev main.py --port $$PORT; \
	else \
		uv run fastapi dev main.py --port 8000; \
	fi

# Run linting with ruff (applies fixes when available)
lint:
	uv run ruff check --fix .

# Format code with ruff
fmt:
	uv run ruff format .

# Clean up project
clean:
	@echo "🧹 Cleaning up generated files..."
	@find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
	@find . -type f -name "*.pyc" -delete 2>/dev/null || true
	@find . -type f -name "*.pyo" -delete 2>/dev/null || true
	@find . -type f -name "*.pyd" -delete 2>/dev/null || true
	@find . -type f -name ".coverage" -delete 2>/dev/null || true
	@find . -type d -name "*.egg-info" -exec rm -rf {} + 2>/dev/null || true
	@find . -type d -name ".pytest_cache" -exec rm -rf {} + 2>/dev/null || true
	@find . -type d -name ".ruff_cache" -exec rm -rf {} + 2>/dev/null || true
	@find . -type d -name ".mypy_cache" -exec rm -rf {} + 2>/dev/null || true
	@find . -type d -name "htmlcov" -exec rm -rf {} + 2>/dev/null || true
	@find . -type f -name ".DS_Store" -delete 2>/dev/null || true
	@echo "✅ Cleanup complete!"

# Build Docker image with specified tag
# Usage: make build TAG=mytag or make build (defaults to 'latest')
build:
	@if [ -z "$(TAG)" ]; then \
		echo "🐳 Building Docker image with tag 'latest'..."; \
		docker build -t server-fastapi:latest .; \
	else \
		echo "🐳 Building Docker image with tag '$(TAG)'..."; \
		docker build -t server-fastapi:$(TAG) .; \
	fi
	@echo "✅ Docker image built successfully!"

# Start Docker containers
up:
	@echo "🚀 Starting Docker containers..."
	docker compose up -d
	@echo "✅ Containers started!"

# Stop Docker containers
down:
	@echo "🛑 Stopping Docker containers..."
	docker compose down
	@echo "✅ Containers stopped!"

# Stop and remove Docker containers, networks, and volumes
downall:
	@echo "🧹 Stopping and removing containers, networks, and volumes..."
	docker compose down --volumes --remove-orphans
	@echo "✅ Complete cleanup finished!"


# Clean up all Docker artifacts generated by this project
destroy:
	@echo "🧹 Destroying all Docker artifacts for this project..."
	docker compose down --volumes --remove-orphans --rmi all
	@echo "✅ Docker cleanup complete!"
