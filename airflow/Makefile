.PHONY: help build init up down downall destroy logs status user-create user-delete user-list rebuild setup

# Default target - show help when just typing 'make'
default: help

# Show help information
help: ## Show this help message
	@echo "Airflow Management"
	@echo "Available commands:"
	@echo ""
	@echo "🔧 Build & Setup:"
	@grep -E '^(lint|fmt|setup|build|rebuild|init):.*?## .*$$' $(MAKEFILE_LIST) | awk 'BEGIN {FS = ":.*?## "}; {printf "  %-12s %s\n", $$1, $$2}'
	@echo ""
	@echo "🚀 Service Management:"
	@grep -E '^(up|down|downall|destroy):.*?## .*$$' $(MAKEFILE_LIST) | awk 'BEGIN {FS = ":.*?## "}; {printf "  %-12s %s\n", $$1, $$2}'
	@echo ""
	@echo "📊 Monitoring:"
	@grep -E '^(logs|status):.*?## .*$$' $(MAKEFILE_LIST) | awk 'BEGIN {FS = ":.*?## "}; {printf "  %-12s %s\n", $$1, $$2}'
	@echo ""
	@echo "👥 User Management:"
	@grep -E '^user-.*:.*?## .*$$' $(MAKEFILE_LIST) | awk 'BEGIN {FS = ":.*?## "}; {printf "  %-12s %s\n", $$1, $$2}'
	@echo ""

# Run linting with ruff (applies fixes when available)
lint: ## Run linting with ruff (applies fixes when available)
	uv run ruff check --fix .

# Format code with ruff
fmt: ## Format code with ruff
	uv run ruff format .

# Complete setup: build, init, and start Airflow
setup: build init ## Complete setup: build image, initialize database, and start services
	@echo ""
	@echo "🎉 Airflow setup complete!"
	@echo "📊 Web UI: http://localhost:8080 (admin/airflow)"
	@echo "🌸 Flower: http://localhost:5555"
	@echo ""
	@echo "Starting services..."
	@$(MAKE) up

# Build custom Airflow Docker image with dependencies from pyproject.toml
build: ## Build custom Airflow image with uv and pyproject.toml dependencies
	@echo "🔨 Building custom Airflow image with uv and dependencies..."
	@echo "📦 Installing packages from pyproject.toml using uv..."
	docker compose build
	@echo "✅ Custom Airflow image built successfully!"
	@echo "💡 Run 'make init' to initialize the database, then 'make up' to start services"

# Rebuild image from scratch (no cache)
rebuild: ## Rebuild custom Airflow image from scratch (no cache)
	@echo "🔨 Rebuilding custom Airflow image from scratch..."
	@echo "🗑️  Removing existing images and clearing build cache..."
	docker compose build --no-cache
	@echo "✅ Custom Airflow image rebuilt successfully!"
	@echo "💡 Run 'make init' to initialize the database, then 'make up' to start services"

# Initialize Airflow database and create admin user
init: ## Initialize Airflow database and create admin user
	docker compose up airflow-init

# Start Airflow services including Flower monitoring
up: ## Start Airflow services including Flower monitoring
	docker compose --profile flower up -d --remove-orphans
	@echo -e "\n🚀 Airflow services are starting up..."
	@echo "📊 Airflow Web UI: http://localhost:8080"
	@echo "🌸 Flower monitoring: http://localhost:5555"
	@echo ""
	@echo "💡 Use 'make logs' to watch Airflow logs"
	@echo "💡 Use 'make status' to check container status"

# Stop all Airflow services
down: ## Stop all Airflow services
	docker compose --profile flower down
	@echo "✅ Airflow services stopped!"

# Stop and remove Airflow services, networks, and volumes
downall: ## Stop and remove containers, networks, and volumes
	docker compose --profile flower down --volumes --remove-orphans
	@echo "✅ Complete cleanup finished!"

# Clean up all Docker artifacts generated by this project
destroy: ## Clean up all Docker artifacts generated by this project
	docker compose --profile flower down --volumes --remove-orphans --rmi all
	rm -rf logs/
	@echo "✅ Docker cleanup complete!"

# Watch logs from Airflow services
logs: ## Watch logs from Airflow services
	@echo "📋 Watching Airflow logs (press Ctrl+C to exit)..."
	@echo ""
	docker compose --profile flower logs -f

# Show status of Airflow containers
status: ## Show status of Airflow containers
	@echo "📊 Airflow Container Status:"
	@echo ""
	@docker compose --profile flower ps
	@echo ""
	@echo "📦 Airflow Volumes:"
	@docker volume ls | grep airflow || echo "No Airflow volumes found"

# Create a new Airflow user interactively
user-create: ## Create a new Airflow user interactively
	@echo "🔐 Creating new Airflow user..."
	@echo "Available roles:"
	@echo "  1) Admin   - Full administrative access"
	@echo "  2) User    - Can view and edit DAGs, tasks"
	@echo "  3) Op      - Can view DAGs, trigger runs"
	@echo "  4) Viewer  - Read-only access"
	@read -p "Select role (1-4): " role_choice; \
	case $$role_choice in \
		1) role="Admin" ;; \
		2) role="User" ;; \
		3) role="Op" ;; \
		4) role="Viewer" ;; \
		*) echo "❌ Invalid choice. Exiting."; exit 1 ;; \
	esac; \
	read -p "Enter username: " username; \
	read -p "Enter first name: " firstname; \
	read -p "Enter last name: " lastname; \
	read -p "Enter email: " email; \
	read -s -p "Enter password: " password; \
	echo; \
	docker compose exec airflow-scheduler airflow users create \
		--username "$$username" \
		--firstname "$$firstname" \
		--lastname "$$lastname" \
		--role "$$role" \
		--email "$$email" \
		--password "$$password" && \
	echo "✅ User '$$username' created successfully with role '$$role'"

# Delete an Airflow user
user-delete: ## Delete an existing Airflow user
	@echo "🗑️  Deleting Airflow user..."
	@echo "Current users:"
	@docker compose exec airflow-scheduler airflow users list
	@read -p "Enter username to delete: " username; \
	read -p "Are you sure you want to delete user '$$username'? (y/N): " confirm; \
	if [ "$$confirm" = "y" ] || [ "$$confirm" = "Y" ]; then \
		docker compose exec airflow-scheduler airflow users delete --username "$$username" && \
		echo "✅ User '$$username' deleted successfully"; \
	else \
		echo "❌ Operation cancelled"; \
	fi

# List all Airflow users
user-list: ## List all Airflow users
	@echo "👥 Current Airflow users:"
	@docker compose exec airflow-scheduler airflow users list
